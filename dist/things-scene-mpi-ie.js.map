{"version":3,"file":"things-scene-mpi-ie.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/segment-display.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/*!\n * segment-display.js\n *\n * Copyright 2012, RÃ¼diger Appel\n * http://www.3quarks.com\n * Published under Creative Commons 3.0 License.\n *\n * Date: 2012-02-14\n * Version: 1.0.0\n *\n * Dokumentation: http://www.3quarks.com/de/Segmentanzeige\n * Documentation: http://www.3quarks.com/en/SegmentDisplay\n */\n\n// Segment display types\nSegmentDisplay.SevenSegment = 7;\nSegmentDisplay.FourteenSegment = 14;\nSegmentDisplay.SixteenSegment = 16;\n\n// Segment corner types\nSegmentDisplay.SymmetricCorner = 0;\nSegmentDisplay.SquaredCorner = 1;\nSegmentDisplay.RoundedCorner = 2;\n\nexport default function SegmentDisplay(width, height) {\n  this.width = width;\n  this.height = height;\n  this.pattern = '##:##:##';\n  this.value = '12:34:56';\n  this.digitHeight = 20;\n  this.digitWidth = 10;\n  this.digitDistance = 2.5;\n  this.displayAngle = 12;\n  this.segmentWidth = 2.5;\n  this.segmentDistance = 0.2;\n  this.segmentCount = SegmentDisplay.SevenSegment;\n  this.cornerType = SegmentDisplay.RoundedCorner;\n  this.colorOn = 'rgb(233, 93, 15)';\n  this.colorOff = 'rgb(75, 30, 5)';\n};\n\nSegmentDisplay.prototype.setValue = function (value) {\n  this.value = value;\n};\n\nSegmentDisplay.prototype.draw = function (context) {\n\n  // compute and check display width\n  var width = 0;\n  var first = true;\n  if (this.pattern) {\n    for (var i = 0; i < this.pattern.length; i++) {\n      var c = this.pattern.charAt(i).toLowerCase();\n      if (c == '#') {\n        width += this.digitWidth;\n      } else if (c == '.' || c == ':') {\n        width += this.segmentWidth;\n      } else if (c != ' ') {\n        return;\n      }\n      width += first ? 0 : this.digitDistance;\n      first = false;\n    }\n  }\n  if (width <= 0) {\n    return;\n  }\n\n  // compute skew factor\n  var angle = -1.0 * Math.max(-45.0, Math.min(45.0, this.displayAngle));\n  var skew = Math.tan((angle * Math.PI) / 180.0);\n\n  // compute scale factor\n  var scale = Math.min(this.width / (width + Math.abs(skew * this.digitHeight)), this.height / this.digitHeight);\n\n  // compute display offset\n  var offsetX = (this.width - (width + skew * this.digitHeight) * scale) / 2.0;\n  var offsetY = (this.height - this.digitHeight * scale) / 2.0;\n\n  // context transformation\n  context.save();\n  context.translate(offsetX, offsetY);\n  context.scale(scale, scale);\n  context.transform(1, 0, skew, 1, 0, 0);\n\n  // draw segments\n  var xPos = 0;\n  var size = (this.value) ? this.value.length : 0;\n  for (var i = 0; i < this.pattern.length; i++) {\n    var mask = this.pattern.charAt(i);\n    var value = (i < size) ? this.value.charAt(i).toLowerCase() : ' ';\n    xPos += this.drawDigit(context, xPos, mask, value);\n  }\n\n  // finish drawing\n  context.restore();\n};\n\nSegmentDisplay.prototype.drawDigit = function (context, xPos, mask, c) {\n  switch (mask) {\n    case '#':\n      var r = Math.sqrt(this.segmentWidth * this.segmentWidth / 2.0);\n      var d = Math.sqrt(this.segmentDistance * this.segmentDistance / 2.0);\n      var e = d / 2.0;\n      var f = (this.segmentWidth - d) * Math.sin((45.0 * Math.PI) / 180.0);\n      var g = f / 2.0;\n      var h = (this.digitHeight - 3.0 * this.segmentWidth) / 2.0;\n      var w = (this.digitWidth - 3.0 * this.segmentWidth) / 2.0;\n      var s = this.segmentWidth / 2.0;\n      var t = this.digitWidth / 2.0;\n\n      // draw segment a (a1 and a2 for 16 segments)\n      if (this.segmentCount == 16) {\n        var x = xPos;\n        var y = 0;\n        context.fillStyle = this.getSegmentColor(c, null, '02356789abcdefgiopqrstz@%');\n        context.beginPath();\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.moveTo(x + s + d, y + s);\n            context.lineTo(x + this.segmentWidth + d, y);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.moveTo(x + s + e, y + s - e);\n            context.lineTo(x + this.segmentWidth, y);\n            break;\n          default:\n            context.moveTo(x + this.segmentWidth - f, y + this.segmentWidth - f - d);\n            context.quadraticCurveTo(x + this.segmentWidth - g, y, x + this.segmentWidth, y);\n        }\n        context.lineTo(x + t - d - s, y);\n        context.lineTo(x + t - d, y + s);\n        context.lineTo(x + t - d - s, y + this.segmentWidth);\n        context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n        context.fill();\n\n        var x = xPos;\n        var y = 0;\n        context.fillStyle = this.getSegmentColor(c, null, '02356789abcdefgiopqrstz@');\n        context.beginPath();\n        context.moveTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n        context.lineTo(x + t + d + s, y + this.segmentWidth);\n        context.lineTo(x + t + d, y + s);\n        context.lineTo(x + t + d + s, y);\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n            context.lineTo(x + this.digitWidth - s - d, y + s);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y);\n            context.lineTo(x + this.digitWidth - s - e, y + s - e);\n            break;\n          default:\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y);\n            context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y, x + this.digitWidth - this.segmentWidth + f, y + this.segmentWidth - f - d);\n        }\n        context.fill();\n\n      } else {\n        var x = xPos;\n        var y = 0;\n        context.fillStyle = this.getSegmentColor(c, '02356789acefp', '02356789abcdefgiopqrstz@');\n        context.beginPath();\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.moveTo(x + s + d, y + s);\n            context.lineTo(x + this.segmentWidth + d, y);\n            context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n            context.lineTo(x + this.digitWidth - s - d, y + s);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.moveTo(x + s + e, y + s - e);\n            context.lineTo(x + this.segmentWidth, y);\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y);\n            context.lineTo(x + this.digitWidth - s - e, y + s - e);\n            break;\n          default:\n            context.moveTo(x + this.segmentWidth - f, y + this.segmentWidth - f - d);\n            context.quadraticCurveTo(x + this.segmentWidth - g, y, x + this.segmentWidth, y);\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y);\n            context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y, x + this.digitWidth - this.segmentWidth + f, y + this.segmentWidth - f - d);\n        }\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n        context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n        context.fill();\n      }\n\n      // draw segment b\n      x = xPos + this.digitWidth - this.segmentWidth;\n      y = 0;\n      context.fillStyle = this.getSegmentColor(c, '01234789adhpy', '01234789abdhjmnopqruwy');\n      context.beginPath();\n      switch (this.cornerType) {\n        case SegmentDisplay.SymmetricCorner:\n          context.moveTo(x + s, y + s + d);\n          context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\n          break;\n        case SegmentDisplay.SquaredCorner:\n          context.moveTo(x + s + e, y + s + e);\n          context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\n          break;\n        default:\n          context.moveTo(x + f + d, y + this.segmentWidth - f);\n          context.quadraticCurveTo(x + this.segmentWidth, y + this.segmentWidth - g, x + this.segmentWidth, y + this.segmentWidth);\n      }\n      context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\n      context.lineTo(x + s, y + h + this.segmentWidth + s - d);\n      context.lineTo(x, y + h + this.segmentWidth - d);\n      context.lineTo(x, y + this.segmentWidth + d);\n      context.fill();\n\n      // draw segment c\n      x = xPos + this.digitWidth - this.segmentWidth;\n      y = h + this.segmentWidth;\n      context.fillStyle = this.getSegmentColor(c, '013456789abdhnouy', '01346789abdghjmnoqsuw@', '%');\n      context.beginPath();\n      context.moveTo(x, y + this.segmentWidth + d);\n      context.lineTo(x + s, y + s + d);\n      context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\n      context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\n      switch (this.cornerType) {\n        case SegmentDisplay.SymmetricCorner:\n          context.lineTo(x + s, y + h + this.segmentWidth + s - d);\n          context.lineTo(x, y + h + this.segmentWidth - d);\n          break;\n        case SegmentDisplay.SquaredCorner:\n          context.lineTo(x + s + e, y + h + this.segmentWidth + s - e);\n          context.lineTo(x, y + h + this.segmentWidth - d);\n          break;\n        default:\n          context.quadraticCurveTo(x + this.segmentWidth, y + h + this.segmentWidth + g, x + f + d, y + h + this.segmentWidth + f); //\n          context.lineTo(x, y + h + this.segmentWidth - d);\n      }\n      context.fill();\n\n      // draw segment d (d1 and d2 for 16 segments)\n      if (this.segmentCount == 16) {\n        x = xPos;\n        y = this.digitHeight - this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, '0235689bcdegijloqsuz_=@');\n        context.beginPath();\n        context.moveTo(x + this.segmentWidth + d, y);\n        context.lineTo(x + t - d - s, y);\n        context.lineTo(x + t - d, y + s);\n        context.lineTo(x + t - d - s, y + this.segmentWidth);\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n            context.lineTo(x + s + d, y + s);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\n            context.lineTo(x + s + e, y + s + e);\n            break;\n          default:\n            context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\n            context.quadraticCurveTo(x + this.segmentWidth - g, y + this.segmentWidth, x + this.segmentWidth - f, y + f + d);\n            context.lineTo(x + this.segmentWidth - f, y + f + d);\n        }\n        context.fill();\n\n        x = xPos;\n        y = this.digitHeight - this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, '0235689bcdegijloqsuz_=@', '%');\n        context.beginPath();\n        context.moveTo(x + t + d + s, y + this.segmentWidth);\n        context.lineTo(x + t + d, y + s);\n        context.lineTo(x + t + d + s, y);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.lineTo(x + this.digitWidth - s - d, y + s);\n            context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.lineTo(x + this.digitWidth - s - e, y + s + e);\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\n            break;\n          default:\n            context.lineTo(x + this.digitWidth - this.segmentWidth + f, y + f + d);\n            context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y + this.segmentWidth, x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\n        }\n        context.fill();\n      }\n      else {\n        x = xPos;\n        y = this.digitHeight - this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, '0235689bcdelotuy_', '0235689bcdegijloqsuz_=@');\n        context.beginPath();\n        context.moveTo(x + this.segmentWidth + d, y);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n        switch (this.cornerType) {\n          case SegmentDisplay.SymmetricCorner:\n            context.lineTo(x + this.digitWidth - s - d, y + s);\n            context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n            context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n            context.lineTo(x + s + d, y + s);\n            break;\n          case SegmentDisplay.SquaredCorner:\n            context.lineTo(x + this.digitWidth - s - e, y + s + e);\n            context.lineTo(x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\n            context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\n            context.lineTo(x + s + e, y + s + e);\n            break;\n          default:\n            context.lineTo(x + this.digitWidth - this.segmentWidth + f, y + f + d);\n            context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y + this.segmentWidth, x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\n            context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\n            context.quadraticCurveTo(x + this.segmentWidth - g, y + this.segmentWidth, x + this.segmentWidth - f, y + f + d);\n            context.lineTo(x + this.segmentWidth - f, y + f + d);\n        }\n        context.fill();\n      }\n\n      // draw segment e\n      x = xPos;\n      y = h + this.segmentWidth;\n      context.fillStyle = this.getSegmentColor(c, '0268abcdefhlnoprtu', '0268acefghjklmnopqruvw@');\n      context.beginPath();\n      context.moveTo(x, y + this.segmentWidth + d);\n      context.lineTo(x + s, y + s + d);\n      context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\n      context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\n      switch (this.cornerType) {\n        case SegmentDisplay.SymmetricCorner:\n          context.lineTo(x + s, y + h + this.segmentWidth + s - d);\n          context.lineTo(x, y + h + this.segmentWidth - d);\n          break;\n        case SegmentDisplay.SquaredCorner:\n          context.lineTo(x + s - e, y + h + this.segmentWidth + s - d + e);\n          context.lineTo(x, y + h + this.segmentWidth);\n          break;\n        default:\n          context.lineTo(x + this.segmentWidth - f - d, y + h + this.segmentWidth + f);\n          context.quadraticCurveTo(x, y + h + this.segmentWidth + g, x, y + h + this.segmentWidth);\n      }\n      context.fill();\n\n      // draw segment f\n      x = xPos;\n      y = 0;\n      context.fillStyle = this.getSegmentColor(c, '045689abcefhlpty', '045689acefghklmnopqrsuvwy@', '%');\n      context.beginPath();\n      context.moveTo(x + this.segmentWidth, y + this.segmentWidth + d);\n      context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\n      context.lineTo(x + s, y + h + this.segmentWidth + s - d);\n      context.lineTo(x, y + h + this.segmentWidth - d);\n      switch (this.cornerType) {\n        case SegmentDisplay.SymmetricCorner:\n          context.lineTo(x, y + this.segmentWidth + d);\n          context.lineTo(x + s, y + s + d);\n          break;\n        case SegmentDisplay.SquaredCorner:\n          context.lineTo(x, y + this.segmentWidth);\n          context.lineTo(x + s - e, y + s + e);\n          break;\n        default:\n          context.lineTo(x, y + this.segmentWidth);\n          context.quadraticCurveTo(x, y + this.segmentWidth - g, x + this.segmentWidth - f - d, y + this.segmentWidth - f);\n          context.lineTo(x + this.segmentWidth - f - d, y + this.segmentWidth - f);\n      }\n      context.fill();\n\n      // draw segment g for 7 segments\n      if (this.segmentCount == 7) {\n        x = xPos;\n        y = (this.digitHeight - this.segmentWidth) / 2.0;\n        context.fillStyle = this.getSegmentColor(c, '2345689abdefhnoprty-=');\n        context.beginPath();\n        context.moveTo(x + s + d, y + s);\n        context.lineTo(x + this.segmentWidth + d, y);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n        context.lineTo(x + this.digitWidth - s - d, y + s);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n        context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n        context.fill();\n      }\n\n      // draw inner segments for the fourteen- and sixteen-segment-display\n      if (this.segmentCount != 7) {\n        // draw segment g1\n        x = xPos;\n        y = (this.digitHeight - this.segmentWidth) / 2.0;\n        context.fillStyle = this.getSegmentColor(c, null, '2345689aefhkprsy-+*=', '%');\n        context.beginPath();\n        context.moveTo(x + s + d, y + s);\n        context.lineTo(x + this.segmentWidth + d, y);\n        context.lineTo(x + t - d - s, y);\n        context.lineTo(x + t - d, y + s);\n        context.lineTo(x + t - d - s, y + this.segmentWidth);\n        context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\n        context.fill();\n\n        // draw segment g2\n        x = xPos;\n        y = (this.digitHeight - this.segmentWidth) / 2.0;\n        context.fillStyle = this.getSegmentColor(c, null, '234689abefghprsy-+*=@', '%');\n        context.beginPath();\n        context.moveTo(x + t + d, y + s);\n        context.lineTo(x + t + d + s, y);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\n        context.lineTo(x + this.digitWidth - s - d, y + s);\n        context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\n        context.lineTo(x + t + d + s, y + this.segmentWidth);\n        context.fill();\n\n        // draw segment j\n        x = xPos + t - s;\n        y = 0;\n        context.fillStyle = this.getSegmentColor(c, null, 'bdit+*', '%');\n        context.beginPath();\n        if (this.segmentCount == 14) {\n          context.moveTo(x, y + this.segmentWidth + this.segmentDistance);\n          context.lineTo(x + this.segmentWidth, y + this.segmentWidth + this.segmentDistance);\n        } else {\n          context.moveTo(x, y + this.segmentWidth + d);\n          context.lineTo(x + s, y + s + d);\n          context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\n        }\n        context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\n        context.lineTo(x + s, y + h + this.segmentWidth + s - d);\n        context.lineTo(x, y + h + this.segmentWidth - d);\n        context.fill();\n\n        // draw segment m\n        x = xPos + t - s;\n        y = this.digitHeight;\n        context.fillStyle = this.getSegmentColor(c, null, 'bdity+*@', '%');\n        context.beginPath();\n        if (this.segmentCount == 14) {\n          context.moveTo(x, y - this.segmentWidth - this.segmentDistance);\n          context.lineTo(x + this.segmentWidth, y - this.segmentWidth - this.segmentDistance);\n        } else {\n          context.moveTo(x, y - this.segmentWidth - d);\n          context.lineTo(x + s, y - s - d);\n          context.lineTo(x + this.segmentWidth, y - this.segmentWidth - d);\n        }\n        context.lineTo(x + this.segmentWidth, y - h - this.segmentWidth + d);\n        context.lineTo(x + s, y - h - this.segmentWidth - s + d);\n        context.lineTo(x, y - h - this.segmentWidth + d);\n        context.fill();\n\n        // draw segment h\n        x = xPos + this.segmentWidth;\n        y = this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, 'mnx\\\\*');\n        context.beginPath();\n        context.moveTo(x + this.segmentDistance, y + this.segmentDistance);\n        context.lineTo(x + this.segmentDistance + r, y + this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance, y + h - this.segmentDistance - r);\n        context.lineTo(x + w - this.segmentDistance, y + h - this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance - r, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + this.segmentDistance + r);\n        context.fill();\n\n        // draw segment k\n        x = xPos + w + 2.0 * this.segmentWidth;\n        y = this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, '0kmvxz/*', '%');\n        context.beginPath();\n        context.moveTo(x + w - this.segmentDistance, y + this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance, y + this.segmentDistance + r);\n        context.lineTo(x + this.segmentDistance + r, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance - r);\n        context.lineTo(x + w - this.segmentDistance - r, y + this.segmentDistance);\n        context.fill();\n\n        // draw segment l\n        x = xPos + w + 2.0 * this.segmentWidth;\n        y = h + 2.0 * this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, '5knqrwx\\\\*');\n        context.beginPath();\n        context.moveTo(x + this.segmentDistance, y + this.segmentDistance);\n        context.lineTo(x + this.segmentDistance + r, y + this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance, y + h - this.segmentDistance - r);\n        context.lineTo(x + w - this.segmentDistance, y + h - this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance - r, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + this.segmentDistance + r);\n        context.fill();\n\n        // draw segment n\n        x = xPos + this.segmentWidth;\n        y = h + 2.0 * this.segmentWidth;\n        context.fillStyle = this.getSegmentColor(c, null, '0vwxz/*', '%');\n        context.beginPath();\n        context.moveTo(x + w - this.segmentDistance, y + this.segmentDistance);\n        context.lineTo(x + w - this.segmentDistance, y + this.segmentDistance + r);\n        context.lineTo(x + this.segmentDistance + r, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance);\n        context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance - r);\n        context.lineTo(x + w - this.segmentDistance - r, y + this.segmentDistance);\n        context.fill();\n      }\n\n      return this.digitDistance + this.digitWidth;\n\n    case '.':\n      context.fillStyle = (c == '#') || (c == '.') ? this.colorOn : this.colorOff;\n      this.drawPoint(context, xPos, this.digitHeight - this.segmentWidth, this.segmentWidth);\n      return this.digitDistance + this.segmentWidth;\n\n    case ':':\n      context.fillStyle = (c == '#') || (c == ':') ? this.colorOn : this.colorOff;\n      var y = (this.digitHeight - this.segmentWidth) / 2.0 - this.segmentWidth;\n      this.drawPoint(context, xPos, y, this.segmentWidth);\n      this.drawPoint(context, xPos, y + 2.0 * this.segmentWidth, this.segmentWidth);\n      return this.digitDistance + this.segmentWidth;\n\n    default:\n      return this.digitDistance;\n  }\n};\n\nSegmentDisplay.prototype.drawPoint = function (context, x1, y1, size) {\n  var x2 = x1 + size;\n  var y2 = y1 + size;\n  var d = size / 4.0;\n\n  context.beginPath();\n  context.moveTo(x2 - d, y1);\n  context.quadraticCurveTo(x2, y1, x2, y1 + d);\n  context.lineTo(x2, y2 - d);\n  context.quadraticCurveTo(x2, y2, x2 - d, y2);\n  context.lineTo(x1 + d, y2);\n  context.quadraticCurveTo(x1, y2, x1, y2 - d);\n  context.lineTo(x1, y1 + d);\n  context.quadraticCurveTo(x1, y1, x1 + d, y1);\n  context.fill();\n};\n\nSegmentDisplay.prototype.getSegmentColor = function (c, charSet7, charSet14, charSet16) {\n  if (c == '#') {\n    return this.colorOn;\n  } else {\n    switch (this.segmentCount) {\n      case 7: return (charSet7.indexOf(c) == -1) ? this.colorOff : this.colorOn;\n      case 14: return (charSet14.indexOf(c) == -1) ? this.colorOff : this.colorOn;\n      case 16: var pattern = charSet14 + (charSet16 === undefined ? '' : charSet16);\n        return (pattern.indexOf(c) == -1) ? this.colorOff : this.colorOn;\n      default: return this.colorOff;\n    }\n  }\n};\n"],"mappings":"AACA;;;;;;;;;;;;;ACuBA","sourceRoot":""}